#!/bin/bash -eu

# i18n 国際化対応
declare -A i18n
case $LANG in
  'DEBUG' )
    i18n=(
      # <autosort>
      [addFileToStageSelectFiles]='addFileToStageSelectFiles'
      [addFileToUnstageSelectFiles]='addFileToUnstageSelectFiles'
      [backToMainMenu]='backToMainMenu'
      [cleanRepositoryYesNo]='cleanRepositoryYesNo'
      [cloneRepositoryInputPath]='cloneRepositoryInputPath'
      [commandGitNotFound]='commandGitNotFound'
      [commandWhiptailNotFound]='commandWhiptailNotFound'
      [commitFileCommitMessage]='commitFileCommitMessage'
      [commitFileSelectFiles]='commitFileSelectFiles'
      [editLastCommitMenuAddAddedFilesToLastCommit]='editLastCommitMenuAddAddedFilesToLastCommit'
      [editLastCommitMenuEditLastCommitMessage]='editLastCommitMenuEditLastCommitMessage'
      [editLastCommitMenu]='editLastCommitMenu'
      [editLastCommitMessageNewMessage]='editLastCommitMessageNewMessage'
      [fileNotFound]='fileNotFound'
      [gitExist]='gitExist'
      [gitNotExist]='gitNotExist'
      [mainMenuEditLastCommit]='mainMenuEditLastCommit'
      [mainMenuExit]='mainMenuExit'
      [mainMenuGitAddAllFileToStage]='mainMenuGitAddAllFileToStage'
      [mainMenuGitAddAllFileToUnstage]='mainMenuGitAddAllFileToUnstage'
      [mainMenuGitAddFileToStage]='mainMenuGitAddFileToStage'
      [mainMenuGitAddFileToUnstage]='mainMenuGitAddFileToUnstage'
      [mainMenuGitCheckoutAllFile]='mainMenuGitCheckoutAllFile'
      [mainMenuGitCheckoutFile]='mainMenuGitCheckoutFile'
      [mainMenuGitCleanRepository]='mainMenuGitCleanRepository'
      [mainMenuGitClone]='mainMenuGitClone'
      [mainMenuGitCommitAllFile]='mainMenuGitCommitAllFile'
      [mainMenuGitCommitFile]='mainMenuGitCommitFile'
      [mainMenuGitInitialize]='mainMenuGitInitialize'
      [mainMenuGitPull]='mainMenuGitPull'
      [mainMenuGitPush]='mainMenuGitPush'
      [mainMenuManagementSubmodule]='mainMenuManagementSubmodule'
      [mainMenuOthers]='mainMenuOthers'
      [mainMenuShowGitStatus]='mainMenuShowGitStatus'
      [mainMenuViewGitLog]='mainMenuViewGitLog'
      [mainMenu]='mainMenu'
      [mainMenuremoveRepository]='mainMenuremoveRepository'
      [removeRepositorySuccess]='removeRepositorySuccess'
      [removeRepositoryYesNo]='removeRepositoryYesNo'
      # </autosort>
    ) ;;

  'ja_JP.UTF-8' )
    i18n=(
      # <autosort>
      [addFileToStageSelectFiles]='ステージに追加するファイルを選択'
      [addFileToUnstageSelectFiles]='追加を取り消すファイルを選択'
      [backToMainMenu]='メインメニューに戻る'
      [cleanRepositoryYesNo]='本当にリポジトリをクリーンしますか？'
      [cloneRepositoryInputPath]='複製するリポジトリのパスを入力'
      [commandGitNotFound]='コマンドが見つかりません: git'
      [commandWhiptailNotFound]='コマンドが見つかりません: whiptail'
      [commitFileCommitMessage]='コミットメッセージを入力'
      [commitFileSelectFiles]='コミットするファイルを選択'
      [editLastCommitMenuAddAddedFilesToLastCommit]='追加されたファイルを前回のコミットに追加 (git commit --amend --no-edit)'
      [editLastCommitMenuEditLastCommitMessage]='前回のコミットメッセージを編集する (git commit --amend -m)'
      [editLastCommitMenu]='GitSweet | メインメニュー | 前回のコミットを編集'
      [editLastCommitMessageNewMessage]='新しいコミットメッセージを入力'
      [fileNotFound]='ファイルが見つかりません'
      [gitExist]='".git/" が存在します'
      [gitNotExist]='".git/" が存在しません'
      [mainMenuEditLastCommit]='前回のコミットを編集 |>'
      [mainMenuExit]='GitSweet を終了する'
      [mainMenuGitAddAllFileToStage]='すべてのファイルをステージに追加 (git add --all)'
      [mainMenuGitAddAllFileToUnstage]='すべてのファイルの追加を取り消す (git reset HEAD)'
      [mainMenuGitAddFileToStage]='ファイルをステージに追加 (git add)'
      [mainMenuGitAddFileToUnstage]='ファイルの追加を取り消す (git reset HEAD)'
      [mainMenuGitCheckoutAllFile]='すべてのファイルの変更を取り消す (git checkout)'
      [mainMenuGitCheckoutFile]='ファイルの変更を取り消す (git checkout)'
      [mainMenuGitCleanRepository]='ローカルリポジトリをクリーン (git clean -df)'
      [mainMenuGitClone]='リポジトリを複製 (git clone)'
      [mainMenuGitCommitAllFile]='すべてのファイルをコミット (git commit -m)'
      [mainMenuGitCommitFile]='ファイルをコミット (git commit -m)'
      [mainMenuGitInitialize]='ローカルリポジトリを作成 (git init)'
      [mainMenuGitPull]='リモートリポジトリからプル (git pull)'
      [mainMenuGitPush]='リモートリポジトリにプッシュ (git push)'
      [mainMenuManagementSubmodule]='サブモジュールを管理 |>'
      [mainMenuOthers]='その他 |>'
      [mainMenuShowGitStatus]='ステータスを表示 (git status)'
      [mainMenuViewGitLog]='ログを見る (git log)'
      [mainMenu]='GitSweet | メインメニュー'
      [mainMenuremoveRepository]='ローカルリポジトリを削除 (rm -rf .git/)'
      [removeRepositorySuccess]='リポジトリを削除しました'
      [removeRepositoryYesNo]='本当にリポジトリを削除しますか？'
      # </autosort>
    ) ;;

  * )
    i18n=(
      # <autosort>
      [addFileToStageSelectFiles]='Select file to add to stage'
      [addFileToUnstageSelectFiles]='Select file to add to unstage'
      [backToMainMenu]='Back to main menu'
      [cleanRepositoryYesNo]='Clean repository?'
      [cloneRepositoryInputPath]='Enter the repository path to clone'
      [commandGitNotFound]='Command not found: git'
      [commandWhiptailNotFound]='Command not found: whiptail'
      [commitFileCommitMessage]='Enter commit message'
      [commitFileSelectFiles]='Select file to commit'
      [editLastCommitMenuAddAddedFilesToLastCommit]='Add added files to last commit (git commit --amend --no-edit)'
      [editLastCommitMenuEditLastCommitMessage]='Edit last commit message (git commit --amend -m)'
      [editLastCommitMenu]='GitSweet | Main menu | Edit last commit'
      [editLastCommitMessageNewMessage]='Enter new commit message'
      [fileNotFound]='File not found'
      [gitExist]='".git/" Exist'
      [gitNotExist]='".git/" not exist'
      [mainMenuEditLastCommit]='Edit last commit |>'
      [mainMenuExit]='Exit GitSweet'
      [mainMenuGitAddAllFileToStage]='Add all file to stage (git add --all)'
      [mainMenuGitAddAllFileToUnstage]='Add all file to unstage (git reset HEAD)'
      [mainMenuGitAddFileToStage]='Add file to stage (git add)'
      [mainMenuGitAddFileToUnstage]='Add file to unstage (git reset HEAD)'
      [mainMenuGitCheckoutAllFile]='Cancel change of all file (git checkout)'
      [mainMenuGitCheckoutFile]='Cancel change of file (git checkout)'
      [mainMenuGitCleanRepository]='Clean repository (git clean -df)'
      [mainMenuGitClone]='Clone repository (git clone)'
      [mainMenuGitCommitAllFile]='Commit all file (git commit -m)'
      [mainMenuGitCommitFile]='Commit file (git commit -m)'
      [mainMenuGitInitialize]='Create local repository (git init)'
      [mainMenuGitPull]='Pull from remote repository (git pull)'
      [mainMenuGitPush]='Push to remote repository (git push)'
      [mainMenuManagementSubmodule]='Management submodule |>'
      [mainMenuOthers]='Others |>'
      [mainMenuShowGitStatus]='Show status (git status)'
      [mainMenuViewGitLog]='View logs (git log)'
      [mainMenu]='GitSweet | Main menu'
      [mainMenuremoveRepository]='Remove local repository (rm -rf .git/)'
      [removeRepositorySuccess]='Removed repository'
      [removeRepositoryYesNo]='Want to remove repository?'
      # </autosort>
    ) ;;
esac

# すべてのファイルをステージに追加
function addAllFileToStage() {
  local temp=$(mktemp)
  local command=$(git add --all > $temp 2>&1; LANG=C echo -n $?)
  if [ $command -ne 0 ]; then
    whiptail --msgbox \
      "$(LANG=C cat $temp)" \
      30 90
  fi
  rm $temp
}

# すべてのファイルの追加を取り消す
function addAllFileToUnstage() {
  local list=$(git diff --name-only --cached)
  if [ -z "$list" ]; then
    whiptail --msgbox \
      "${i18n['fileNotFound']}" \
      30 90
    return
  fi
  whiptail --msgbox \
    "$(git reset HEAD 2>&1)" \
    30 90
}

# 追加されたファイルを前回のコミットに追加
function addAddedFilesToLastCommit() {
  local list=$(git diff --name-only --cached)
  if [ -z "$list" ]; then
    whiptail --msgbox \
      "${i18n['fileNotFound']}" \
      30 90
    return
  fi
  whiptail --msgbox \
    "$(git commit --amend --no-edit)" \
    30 90
}

# ファイルをステージに追加
function addFileToStage() {
  local i=0
  local s=65
  local f
  local files
  local list=$(git ls-files --others --modified --exclude-standard)
  if [ -z "$list" ]; then
    whiptail --msgbox \
      "${i18n['fileNotFound']}" \
      30 90
    return
  fi
  for f in $list; do
    files[i]=$(LANG=C echo -en "\0$(( $s / 64 * 100 + $s % 64 / 8 * 10 + $s % 8 ))")
    files[i+1]="$f"
    ((i+=2))
    ((s++))
  done
  local menu=$(whiptail --menu \
    "${i18n['addFileToStageSelectFiles']}" \
    30 90 20 \
    "${files[@]}" \
    2>&1 > /dev/tty)
  menu=${files[(( index = 2 * ( $( LANG=C printf "%d" "'$menu" ) - 65 ) + 1 ))]}
  local temp=$(mktemp)
  local command=$(git add $menu > $temp 2>&1; LANG=C echo -n $?)
  if [ $command -ne 0 ]; then
    whiptail --msgbox \
      "$(LANG=C cat $temp)" \
      30 90
  fi
  rm $temp
}

# ファイルの追加を取り消す
function addFileToUnstage() {
  local i=0
  local s=65
  local f
  local files
  local list=$(git diff --name-only --cached)
  if [ -z "$list" ]; then
    whiptail --msgbox \
      "${i18n['fileNotFound']}" \
      30 90
    return
  fi
  for f in $list; do
    files[i]=$(LANG=C echo -en "\0$(( $s / 64 * 100 + $s % 64 / 8 * 10 + $s % 8 ))")
    files[i+1]="$f"
    ((i+=2))
    ((s++))
  done
  local menu=$(whiptail --menu \
    "${i18n['addFileToUnstageSelectFiles']}" \
    30 90 20 \
    "${files[@]}" \
    2>&1 > /dev/tty)
  menu=${files[(( index = 2 * ( $( LANG=C printf "%d" "'$menu" ) - 65 ) + 1 ))]}
  whiptail --msgbox \
    "$(git reset HEAD $menu 2>&1)" \
    30 90
}

# リポジトリをクリーン
function cleanRepository() {
  local list=$(git ls-files --others)
  if [ -z "$list" ]; then
    whiptail --msgbox \
      "${i18n['fileNotFound']}" \
      30 90
    return
  fi
  local yesno=$(whiptail --yesno \
    "${i18n['cleanRepositoryYesNo']}" \
    30 90 \
    2>&1 > /dev/tty; LANG=C echo -n $?)
  if [ $yesno -eq 0 ]; then
    whiptail --msgbox \
      "$(git clean -df 2>&1)" \
      30 90
  fi
}

# リポジトリを複製
function cloneRepository() {
  local input=$(whiptail --inputbox \
    "${i18n['cloneRepositoryInputPath']}" \
    30 90 \
    2>&1 > /dev/tty)
  local temp=$(mktemp)
  local command=$(git clone "$input" . > $temp 2>&1; LANG=C echo -n $?)
  if [ $command -ne 0 ]; then
    whiptail --msgbox \
      "$(LANG=C cat $temp)" \
      30 90
  fi
  rm $temp
}

# すべてのファイルをコミット
function commitAllFile() {
  local input=$(whiptail --inputbox \
    "${i18n['commitFileCommitMessage']}" \
    30 90 \
    2>&1 > /dev/tty)
  whiptail --msgbox \
    "$(git commit -m "$input" 2>&1)" \
    30 90
}

# ファイルをコミット
function commitFile() {
  local i=0
  local s=65
  local f
  local files
  local list=$(git diff --name-only --cached)
  if [ -z "$list" ]; then
    whiptail --msgbox \
      "${i18n['fileNotFound']}" \
      30 90
    return
  fi
  for f in $list; do
    files[i]=$(LANG=C echo -en "\0$(( $s / 64 * 100 + $s % 64 / 8 * 10 + $s % 8 ))")
    files[i+1]="$f"
    ((i+=2))
    ((s++))
  done
  local menu=$(whiptail --menu \
    "${i18n['commitFileSelectFiles']}" \
    30 90 20 \
    "${files[@]}" \
    2>&1 > /dev/tty)
  menu=${files[(( index = 2 * ( $( LANG=C printf "%d" "'$menu" ) - 65 ) + 1 ))]}
  local input=$(whiptail --inputbox \
    "${i18n['commitFileCommitMessage']}" \
    30 90 \
    2>&1 > /dev/tty)
  whiptail --msgbox \
    "$(git commit -m "$input" -- $menu 2>&1)" \
    30 90
}

# 前回のコミットメッセージを編集する
function editLastCommitMessage() {
  local input=$(whiptail --inputbox \
    "${i18n['editLastCommitMessageNewMessage']}" \
    30 90 \
    2>&1 > /dev/tty)
  whiptail --msgbox \
    "$(git commit --amend -m "$input" 2>&1)" \
    30 90
}

# メインメニューから抜ける
function exitMainMenu() {
  exit
}

# whiptail の色を変更
function changeWhiptailColors() {
  export NEWT_COLORS='
    root=,magenta
    entry=white,magenta
  '
}

# ローカルリポジトリを作成
function initializeRepository() {
  whiptail --msgbox \
    "$(git init 2>&1)" \
    30 90
}

# ディレクトリ ".git/" が存在するか
function isExistGit() {
  if [ ! -d .git ]; then
    whiptail --msgbox \
      "${i18n['gitNotExist']}" \
      30 90
    return 1
  fi
}

# コマンド git が存在するか
function isGitCommand() {
  if !(type git > /dev/null 2>&1); then
    whiptail --msgbox \
      "${i18n['commandGitNotFound']}" \
      30 90
    return 255
  fi
}

# コマンド whiptail が存在するか
function isWhiptailCommand() {
  if !(type whiptail > /dev/null 2>&1); then
    echo "${i18n['commandWhiptailNotFound']}"
    return 255
  fi
}

# ディレクトリ ".git/" が存在しなかったら
function isntExistGit() {
  if [ -d .git ]; then
    whiptail --msgbox \
      "${i18n['gitExist']}" \
      30 90
    return 1
  fi
}

# リモートリポジトリからプル
function pullRepository() {
  whiptail --msgbox \
    "$(git pull 2>&1)" \
    30 90
}

# リモートリポジトリにプッシュ
function pushRepository() {
  whiptail --msgbox \
    "$(git push 2>&1)" \
    30 90
}

# ディレクトリ ".git/" を削除
function removeRepository() {
  local yesno=$(whiptail --yesno \
    "${i18n['removeRepositoryYesNo']}" \
    30 90 \
    2>&1 > /dev/tty; LANG=C echo -n $?)
  if [ $yesno -eq 0 ]; then
    rm -rvf .git/
    whiptail --msgbox \
      "${i18n['removeRepositorySuccess']}" \
      30 90
  fi
}

# 前回のコミットを編集するメニューを表示
function showEditLastCommitMenu() {
  local menulist=(
    1 "${i18n['editLastCommitMenuEditLastCommitMessage']}"
    2 "${i18n['editLastCommitMenuAddAddedFilesToLastCommit']}"
    3 "${i18n['backToMainMenu']}"
  )
  local menu=$(whiptail --menu --nocancel \
    "${i18n['editLastCommitMenu']}" \
    30 90 20 \
    "${menulist[@]}" \
    2>&1 > /dev/tty)
  LANG=C echo -n $menu
}

# git status を表示
function showGitStatus() {
  whiptail --msgbox \
    "$(git status 2>&1)" \
    30 90
}

# メインメニューを表示
function showMainMenu() {
  local menulist=(
    1  "${i18n['mainMenuShowGitStatus']}"
    2  "${i18n['mainMenuGitAddFileToStage']}"
    3  "${i18n['mainMenuGitAddAllFileToStage']}"
    4  "${i18n['mainMenuGitCommitFile']}"
    5  "${i18n['mainMenuGitCommitAllFile']}"
    6  "${i18n['mainMenuGitPush']}"
    7  "${i18n['mainMenuGitPull']}"
    8  "${i18n['mainMenuGitAddFileToUnstage']}"
    9  "${i18n['mainMenuGitAddAllFileToUnstage']}"
    10 "${i18n['mainMenuGitCheckoutFile']}"
    11 "${i18n['mainMenuGitCheckoutAllFile']}"
    12 "${i18n['mainMenuManagementSubmodule']}"
    13 "${i18n['mainMenuGitCleanRepository']}"
    14 "${i18n['mainMenuGitInitialize']}"
    15 "${i18n['mainMenuGitClone']}"
    16 "${i18n['mainMenuremoveRepository']}"
    17 "${i18n['mainMenuOthers']}"
    18 "${i18n['mainMenuEditLastCommit']}"
    19 "${i18n['mainMenuViewGitLog']}"
    20 "${i18n['mainMenuExit']}"
  )
  local menu=$(whiptail --menu --nocancel \
    "${i18n['mainMenu']}" \
    30 90 20 \
    "${menulist[@]}" \
    2>&1 > /dev/tty)
  LANG=C echo -n $menu
}

# git log を見る
function viewGitLog() {
  whiptail --msgbox \
    "$(git log 2>&1)" \
    30 90
}

function main() {
  isWhiptailCommand
  isGitCommand
  changeWhiptailColors
  while :; do
    case $(showMainMenu) in
      1 )
        isExistGit || continue
        showGitStatus ;;

      2 )
        isExistGit || continue
        addFileToStage ;;

      3 )
        isExistGit || continue
        addAllFileToStage ;;

      4 )
        isExistGit || continue
        commitFile ;;

      5 )
        isExistGit || continue
        commitAllFile ;;

      6 )
        isExistGit || continue
        pushRepository ;;

      7 )
        isExistGit || continue
        pullRepository ;;

      8 )
        isExistGit || continue
        addFileToUnstage ;;

      9 )
        isExistGit || continue
        addAllFileToUnstage ;;

      13 )
        isExistGit || continue
        cleanRepository ;;

      14 )
        isntExistGit || continue
        initializeRepository ;;

      15 )
        isntExistGit || continue
        cloneRepository ;;

      16 )
        isExistGit || continue
        removeRepository ;;

      18 )
        case $(showEditLastCommitMenu) in
          1 )
            isExistGit || continue
            editLastCommitMessage ;;

          2 )
            isExistGit || continue
            addAddedFilesToLastCommit ;;
        esac ;;

      19 )
        isExistGit || continue
        viewGitLog ;;

      20 )
        exitMainMenu ;;
    esac
  done
}

main
